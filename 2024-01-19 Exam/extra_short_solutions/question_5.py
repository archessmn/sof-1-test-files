GameObject, GameCard, CardDeck = (type("GameObject", (object,), {"shape": property(lambda self: self._shape), "colour": property(lambda self: self._colour), "__init__": lambda self, shape, colour: exec("self._shape, self._colour = (shape, colour)"), "__eq__": lambda self, value: False if not isinstance(value, GameObject) else self._shape == value.shape and self._colour == value.colour, "__hash__": lambda self: hash((self._shape, self._colour))}), type("GameCard", (object,), {"content": property(lambda self: __import__('copy').deepcopy(self._content)), "__init__": lambda self, game_object1, game_object2: exec("self._content = [game_object1, game_object2]"), "__contains__": lambda self, item: False if not isinstance(item, GameObject) else item in self._content, "__eq__": lambda self, value: False if not isinstance(value, GameCard) else all(game_object in value for game_object in self._content), "__hash__": lambda self: hash((list(game_object.colour for game_object in self._content).sort(), list(game_object.shape for game_object in self._content).sort()))}), type("CardDeck", (object,), {"_get_init_values": lambda self, objects: exec('raise ValueError()') if len(objects) not in {3, 4, 5} else (lambda colours, shapes: (set(objects), colours, shapes) if len(set(colours)) == len(colours) and len(set(shapes)) == len(shapes) else exec('raise ValueError()'))(set(map(lambda g_o: g_o.colour, objects)), set(map(lambda g_o: g_o.shape, objects))), "__init__": lambda self, objects: exec('self._objects, self._colours, self._shapes = self._get_init_values(objects)'), "generate_deck": lambda self: set().union(*map(lambda game_object: set().union(*map(lambda card_obj1: {GameCard(game_object, card_obj1)}.union(map(lambda card_obj2: GameCard(card_obj1, card_obj2), set().union(*(lambda shapes, colours: map((lambda shape: set(filter(lambda card_obj2: all(map(lambda check_obj: (False if check_obj.colour not in [card_obj1.colour, card_obj2.colour] and check_obj.shape not in [card_obj1.shape, card_obj2.shape] else True) if check_obj != game_object else True, self._objects)), map(lambda valid_colour: GameObject(shape, valid_colour), set(filter(lambda colour: GameObject(shape, colour) not in self._objects, colours)))))), shapes))(list(filter(lambda shape: shape not in [card_obj1.shape, game_object.shape], self._shapes)), list(filter(lambda colour: colour not in [card_obj1.colour, game_object.colour], self._colours)))))), set().union(*(lambda shapes, colours: map((lambda shape: set(map(lambda valid_colour: GameObject(shape, valid_colour), set(filter(lambda colour: GameObject(shape, colour) not in self._objects, colours))))), shapes))(list(filter(lambda shape: shape != game_object.shape, self._shapes)), list(filter(lambda colour: colour != game_object.colour, self._colours)))))), self._objects))}))
